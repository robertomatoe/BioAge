import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

const BioAgePrediction = () => {
  const [biomarkers, setBiomarkers] = useState({
    red_blood_cells: 4.8,
    white_blood_cells: 7.0,
    hemoglobin: 14.0,
    platelets: 250,
    weight: 70,
    height: 170,
    bmi: 24.2,
    systolic_bp: 120,
    diastolic_bp: 80,
    gender: 1
  });

  const [prediction, setPrediction] = useState(null);

  const calculateBMI = () => {
    const heightInMeters = biomarkers.height / 100;
    const bmi = biomarkers.weight / (heightInMeters * heightInMeters);
    setBiomarkers({ ...biomarkers, bmi: parseFloat(bmi.toFixed(1)) });
  };

  const handleSubmit = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/predict', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(biomarkers)
      });
      
      const data = await response.json();
      if (data.status === 'success') {
        setPrediction(data.biological_age);
      }
    } catch (error) {
      console.error('Error predicting biological age:', error);
    }
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle>Biological Age Calculator</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Red Blood Cells (10^12/L)</label>
              <input
                type="number"
                step="0.1"
                value={biomarkers.red_blood_cells}
                onChange={(e) => setBiomarkers({...biomarkers, red_blood_cells: parseFloat(e.target.value)})}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">White Blood Cells (10^9/L)</label>
              <input
                type="number"
                step="0.1"
                value={biomarkers.white_blood_cells}
                onChange={(e) => setBiomarkers({...biomarkers, white_blood_cells: parseFloat(e.target.value)})}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Hemoglobin (g/dL)</label>
              <input
                type="number"
                step="0.1"
                value={biomarkers.hemoglobin}
                onChange={(e) => setBiomarkers({...biomarkers, hemoglobin: parseFloat(e.target.value)})}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Platelets (10^9/L)</label>
              <input
                type="number"
                value={biomarkers.platelets}
                onChange={(e) => setBiomarkers({...biomarkers, platelets: parseFloat(e.target.value)})}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Weight (kg)</label>
              <input
                type="number"
                step="0.1"
                value={biomarkers.weight}
                onChange={(e) => {
                  setBiomarkers({...biomarkers, weight: parseFloat(e.target.value)});
                  calculateBMI();
                }}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Height (cm)</label>
              <input
                type="number"
                value={biomarkers.height}
                onChange={(e) => {
                  setBiomarkers({...biomarkers, height: parseFloat(e.target.value)});
                  calculateBMI();
                }}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Blood Pressure (mmHg)</label>
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="number"
                  value={biomarkers.systolic_bp}
                  onChange={(e) => setBiomarkers({...biomarkers, systolic_bp: parseFloat(e.target.value)})}
                  placeholder="Systolic"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                />
                <input
                  type="number"
                  value={biomarkers.diastolic_bp}
                  onChange={(e) => setBiomarkers({...biomarkers, diastolic_bp: parseFloat(e.target.value)})}
                  placeholder="Diastolic"
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">Gender</label>
              <select
                value={biomarkers.gender}
                onChange={(e) => setBiomarkers({...biomarkers, gender: parseInt(e.target.value)})}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
              >
                <option value={1}>Male</option>
                <option value={2}>Female</option>
              </select>
            </div>
          </div>
        </div>

        <div className="mt-6 space-y-4">
          <div className="text-center">
            <p className="text-sm text-gray-600">Calculated BMI: {biomarkers.bmi}</p>
          </div>

          <button
            onClick={handleSubmit}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
          >
            Calculate Biological Age
          </button>

          {prediction && (
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <p className="text-lg font-semibold">Your Predicted Biological Age:</p>
              <p className="text-3xl font-bold text-blue-600">{prediction.toFixed(1)} years</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default BioAgePrediction;